// SPDX-License-Identifier: MIT
pragma solidity 0.8.18;


contract MyToken {

  
    string public name = "MyToken"; 
    string public symbol = "MTK";   
    uint256 public totalSupply;    


    mapping(address => uint256) public balances;


    address public owner;

    event Mint(address indexed to, uint256 value);
    event Burn(address indexed from, uint256 value);


    modifier onlyOwner() {
        require(msg.sender == owner, "Not the contract owner");
        _;
    }

    constructor() {
        owner = msg.sender;
    }

  
    function mint(address _to, uint256 _value) public onlyOwner {
        require(_to != address(0), "Invalid address"); 

        totalSupply += _value;        
        balances[_to] += _value;      

        emit Mint(_to, _value);      
    }


    function burn(address _from, uint256 _value) public onlyOwner {
        require(_from != address(0), "Invalid address");  
        require(balances[_from] >= _value, "Insufficient balance to burn"); 

        totalSupply -= _value;        
        balances[_from] -= _value;    

        emit Burn(_from, _value);    
    }
}
